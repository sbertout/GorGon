require Math;
require GGscene;
require GGmaths;
require Fbx;
require Geometry;

object TestSGTransforms : CCTestCase
{
};

TestSGTransforms.testTransformComponentWithNonIdentityTransform!()
{
  Entity e("e");
  Vec3 ePos(10, 20, 30); Quat eRot(Euler(PI/2, 0, 0));
  e.setLocalTransform(BuildXfo(ePos, eRot));
  Xfo eTr = e.getLocalTransform();
  this.AssertEquals(eTr.getPosition(), ePos);
  this.AssertEquals(eTr.getRotation(), eRot);

  Entity ec("ec");
  Vec3 ecPos(15, 30, 45); Quat ecRot(Euler(0, PI/2, 0));
  ec.setLocalTransform(BuildXfo(ecPos, ecRot));
  Xfo ecTr = ec.getLocalTransform();
  this.AssertEquals(ecTr.getPosition(), ecPos);
  this.AssertEquals(ecTr.getRotation(), ecRot);

  e.addChild(ec); // this should NOT change ec's transform !
  ecTr = ec.getLocalTransform(); // make sure we get it again !

  AssertAlmostEquals(ecTr.getPosition(), Vec3(15, 30, 45), 0.001);
  AssertAlmostEquals(ecTr.getRotation(), Quat(Euler(0, PI/2, 0)), 0.001);
}

TestSGTransforms.testTransformComponentGetGlobalTransform!()
{
  Entity e("e", BuildXfo(Vec3(10, 20, 30)));
  Xfo elTr = e.getLocalTransform();
  Xfo egTr = e.getGlobalTransform();
  this.AssertEquals(elTr, egTr);

  Entity p("p", BuildXfo(Vec3(-10, -20, -30)));
  p.addChild(e);

  this.AssertEquals(e.getLocalTransform().getPosition(), Vec3(10, 20, 30));
  this.AssertEquals(e.getGlobalTransform().getPosition(), Vec3(0, 0, 0));

  Entity f = Entity("f", BuildXfo(Vec3(10, 20, 30)));
  p.addChild(f, true);

  this.AssertEquals(f.getLocalTransform().getPosition(), Vec3(20, 40, 60));
  this.AssertEquals(f.getGlobalTransform().getPosition(), Vec3(10, 20, 30));
}

TestSGTransforms.testTransformComponentGetGlobalTransformComplex!()
{
  Entity scene("scene", BuildXfo(Vec3(1, 2, 3)));
  Entity group("group", BuildXfo(Vec3(10, 20, 30)));
  scene.addChild(group);
  this.AssertEquals(scene.getLocalTransform().getPosition(), Vec3(1, 2, 3));
  this.AssertEquals(scene.getGlobalTransform().getPosition(), Vec3(1, 2, 3));
  this.AssertEquals(group.getLocalTransform().getPosition(), Vec3(10, 20, 30));
  this.AssertEquals(group.getGlobalTransform().getPosition(), Vec3(11, 22, 33));
  Entity mesh("mesh", BuildXfo(Vec3(100, 200, 300)));
  group.addChild(mesh);
  this.AssertEquals(mesh.getLocalTransform().getPosition(), Vec3(100, 200, 300));
  this.AssertEquals(mesh.getGlobalTransform().getPosition(), Vec3(111, 222, 333));
}

TestSGTransforms.testTransformComponentReparentingEntityWithNonIdentityTransform!()
{
  Entity e("e");
  Vec3 ePos(10, 20, 30); Quat eRot(Euler(PI/2, 0, 0));
  e.setLocalTransform(BuildXfo(ePos, eRot));
  Xfo eTr = e.getLocalTransform();
  this.AssertEquals(eTr.getPosition(), ePos);
  this.AssertEquals(eTr.getRotation(), eRot);

  Entity ec("ec");
  Vec3 ecPos(15, 30, 45); Quat ecRot(Euler(0, PI/2, 0));
  ec.setLocalTransform(BuildXfo(ecPos, ecRot));
  Xfo ecTr = ec.getLocalTransform();
  this.AssertEquals(ecTr.getPosition(), ecPos);
  this.AssertEquals(ecTr.getRotation(), ecRot);

  e.addChild(ec, true); // this should change ec's transform !
  ecTr = ec.getLocalTransform(); // make sure we get it again !

  AssertAlmostEquals(ecTr.getPosition(), Vec3(5, 15, -10), 0.001);
  AssertAlmostEquals(ecTr.getRotation(), Quat(Euler(-PI/2, PI/2, 0)), 0.001);
}

TestSGTransforms.testTransformComponentReparentingEntityAlreadyParentedWithNonIdentityTransform!()
{
  Entity scene1("scene1", BuildXfo(50, 0, 0));
  Entity scene2("scene2", BuildXfo(-50, 0, 0));
  this.Assert(scene1.isInstanced() == false);
  this.Assert(scene2.isInstanced() == false);

  Entity c("c", BuildXfo(50, 0, 0));
  scene1.addChild(c, true);
  
  AssertAlmostEquals(c.getLocalTransform().getPosition(), Vec3(0, 0, 0), 0.001);
  AssertAlmostEquals(c.getGlobalTransform().getPosition(), Vec3(50, 0, 0), 0.001);
  scene1.addChild(c, true); // adding same child to same scene1 should not change anything !
  AssertAlmostEquals(c.getLocalTransform().getPosition(), Vec3(0, 0, 0), 0.001);
  AssertAlmostEquals(c.getGlobalTransform().getPosition(), Vec3(50, 0, 0), 0.001);

  // now let's change child's parent !
  scene2.addChild(c, true);  
  this.Assert(c.isInstanced() == false);
  AssertAlmostEquals(c.getLocalTransform().getPosition(), Vec3(100, 0, 0), 0.001);
  AssertAlmostEquals(c.getGlobalTransform().getPosition(), Vec3(50, 0, 0), 0.001);
}

TestSGTransforms.testTransformComponentInstancing!()
{
  Entity scene1("scene1", BuildXfo(50, 0, 0));
  Entity scene2("scene2", BuildXfo(-50, 0, 0));

  Entity c("c", BuildXfo(0, 0, 0));
  scene1.addChild(c);
  scene2.addChild(c);

  this.Assert(c.isInstanced() == true);

  Ref<Entity> parents [] = c.getParents();
  this.Assert(parents[0] == scene1);
  this.Assert(parents[1] == scene2);

  Xfo globalTransforms [] = c.getGlobalTransforms();
  this.Assert(globalTransforms[0].getPosition() == Vec3(50, 0, 0));
  this.Assert(globalTransforms[1].getPosition() == Vec3(-50, 0, 0));

  String paths [] = c.getPaths();
  this.AssertEquals(paths[0], '/scene1/c');
  this.AssertEquals(paths[1], '/scene2/c');
}

TestSGTransforms.testTransformComponentDeepInstancing!()
{
  Entity scene1("scene1", BuildXfo(50, 0, 0));
  Entity scene2("scene2", BuildXfo(-50, 0, 0));

  Entity c("c", BuildXfo(0, 0, 0));
  scene1.addChild(c);
  scene2.addChild(c);

  Entity e("e");
  c.addChild(e);
  this.Assert(e.isInstanced() == true);

  Xfo globalTransforms [] = e.getGlobalTransforms();
  this.Assert(globalTransforms[0].getPosition() == Vec3(50, 0, 0));
  this.Assert(globalTransforms[1].getPosition() == Vec3(-50, 0, 0));

  String paths [] = e.getPaths();
  this.AssertEquals(paths.size(), 2);
  this.AssertEquals(paths[0], '/scene1/c/e');
  this.AssertEquals(paths[1], '/scene2/c/e');
}

object CustomTransformComponent : TransformComponent
{
  Xfo xfo1, xfo2;
};
CustomTransformComponent(Xfo xfo1, Xfo xfo2) {
  this.xfo1 = xfo1; this.xfo2 = xfo2;
}
Xfo CustomTransformComponent.getLocalTransform!() {
  return this.xfo1.linearInterpolate(this.xfo2, 0.5);
}

TestSGTransforms.testCustomTransformComponent!()
{
  Entity scene("scene");
  Entity e("e");
  e.setTransformComponent(CustomTransformComponent(BuildXfo(50,0,0), BuildXfo(-50,0,0)));
  this.AssertEquals(e.getLocalTransform(), Xfo());
}

object ContextBasedTransformComponent : TransformComponent
{
  Xfo xfo[Float32];
};
ContextBasedTransformComponent() {
}
ContextBasedTransformComponent.addXfo!(Xfo xfo, Float32 time) {
  this.xfo[time] = xfo;
}
Xfo ContextBasedTransformComponent.getLocalTransform!() {
  Context ctxt = getContext();
  return this.xfo[ctxt.getCurrentTime()];
}

TestSGTransforms.testCustomTransformComponentUsingContext!()
{
  Context ctxt = getContext();
  this.AssertEquals(ctxt.getCurrentTime(), 0.0);

  Entity scene("scene");
  Entity e("e");

  ContextBasedTransformComponent cbtc();
  Xfo xfo_on_0(BuildXfo(50,0,0));
  Xfo xfo_on_10(BuildXfo(-50,0,0));
  cbtc.addXfo(xfo_on_0, 0);
  cbtc.addXfo(Xfo(), 5);
  cbtc.addXfo(xfo_on_10, 10);
  e.setTransformComponent(cbtc);

  // for (k, v in cbtc.xfo)
  //   report("dict[" + k + "] = " + v);  

  this.AssertEquals(e.getLocalTransform(), xfo_on_0);
  ctxt.setCurrentTime(10.0);
  this.AssertEquals(e.getLocalTransform(), xfo_on_10);
  ctxt.setCurrentTime(5.0);
  this.AssertEquals(e.getLocalTransform(), Xfo());
}
