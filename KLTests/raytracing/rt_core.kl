require GorGon_Raytracing;
using namespace GorGon::Raytracing;

object TestRTCore : CCTestCase
{
};

TestRTCore.testSphere!()
{
	Vec3 center = Vec3(0, 0, 0);
	Scalar radius = 10.0f;
	Sphere sphere = Sphere(center, radius);

	this.AssertEquals(sphere.getCenter(), center);
	this.AssertEquals(sphere.getRadius(), radius);
	this.AssertEquals(sphere.getMin(), Vec3(-radius, -radius, -radius));
	this.AssertEquals(sphere.getMax(), Vec3(+radius, +radius, +radius));

	Box box = sphere.getBox();
	this.AssertEquals(box.getCenter(), center);
	this.AssertEquals(box.getSize(), 2.0 * Vec3(radius, radius, radius));

	this.AssertEquals(sphere.getNormal(Vec3(0, 10, 0)), Vec3(0, 1, 0));
}

TestRTCore.testTriangle!()
{
    Vec3 origin = Vec3(0, 0, 0);
    Triangle tri = Triangle(origin, 2.0, Vec3(1, 0, 0), 4.0, Vec3(0, 1, 0));

	this.AssertEquals(tri.getOrigin(), origin);
	this.AssertEquals(tri.getULength(), 2.0);
	this.AssertEquals(tri.getUDir(), Vec3(1, 0, 0));
	this.AssertEquals(tri.getVLength(), 4.0);
	this.AssertEquals(tri.getVDir(), Vec3(0, 1, 0));

	this.AssertEquals(tri.getMin(), Vec3(0, 0, 0));
	this.AssertEquals(tri.getMax(), Vec3(2, 4, 0));

    Vec3 points[];
	tri.getPoints(points);
	this.AssertEquals(points[0], Vec3(0, 0, 0));
	this.AssertEquals(points[1], Vec3(2, 0, 0));
	this.AssertEquals(points[2], Vec3(0, 4, 0));

    Vec2 uv;
    this.AssertTrue(tri.getUVCoordinates(Vec3(0, 0, 0), uv));
    this.AssertEquals(uv, Vec2(0, 0));
    this.AssertTrue(tri.getUVCoordinates(Vec3(2, 0, 0), uv));
    this.AssertEquals(uv, Vec2(1, 0));
    this.AssertTrue(tri.getUVCoordinates(Vec3(0, 4, 0), uv));
    this.AssertEquals(uv, Vec2(0, 1));

    // outside the triangle!
    this.AssertFalse(tri.getUVCoordinates(Vec3(2, 4, 0), uv));
    this.AssertEquals(uv, Vec2(1, 1));
    this.AssertFalse(tri.getUVCoordinates(Vec3(-2, -4, 0), uv));
    this.AssertEquals(uv, Vec2(-1, -1));
    this.AssertFalse(tri.getUVCoordinates(Vec3(4, 8, 0), uv));
    this.AssertEquals(uv, Vec2(2, 2));

    tri = Triangle(Vec3(0, 0, 0), Vec3(2, 0, 0), Vec3(0, 4, 0));
	this.AssertEquals(tri.getOrigin(), Vec3(0, 0, 0));
	this.AssertEquals(tri.getULength(), 2.0);
	this.AssertEquals(tri.getUDir(), Vec3(1, 0, 0));
	this.AssertEquals(tri.getVLength(), 4.0);
	this.AssertEquals(tri.getVDir(), Vec3(0, 1, 0));
	this.AssertEquals(tri.getMin(), Vec3(0, 0, 0));
	this.AssertEquals(tri.getMax(), Vec3(2, 4, 0));

    tri = Triangle(Vec3(2, 0, 0), Vec3(0, 4, 0), Vec3(0, 0, 0));
	this.AssertEquals(tri.getOrigin(), Vec3(2, 0, 0));
	this.AssertAlmostEquals(tri.getULength(), +4.472136);
	this.AssertAlmostEquals(tri.getUDir(), Vec3(-0.447213, +0.894427, 0));
	this.AssertEquals(tri.getVLength(), 2.0);
	this.AssertEquals(tri.getVDir(), Vec3(-1, 0, 0));
	this.AssertEquals(tri.getMin(), Vec3(0, 0, 0));
	this.AssertEquals(tri.getMax(), Vec3(2, 4, 0));
}

TestRTCore.testQuad!()
{
	Vec3 center = Vec3(0, 0, 0);
	Quad quad = Quad(center, 2.0, Vec3(1, 0, 0), 4.0, Vec3(0, 1, 0));

	this.AssertEquals(quad.getCenter(), center);
	this.AssertEquals(quad.getULength(), 2.0);
	this.AssertEquals(quad.getUDir(), Vec3(1, 0, 0));
	this.AssertEquals(quad.getVLength(), 4.0);
	this.AssertEquals(quad.getVDir(), Vec3(0, 1, 0));

	this.AssertEquals(quad.getMin(), Vec3(-1, -2, 0));
	this.AssertEquals(quad.getMax(), Vec3(+1, +2, 0));
	this.AssertEquals(quad.getNormal(), Vec3(0, 0, 1));

	Vec3 points[];
	quad.getPoints(points);
	this.AssertEquals(points[0], Vec3(-1, -2, 0));
	this.AssertEquals(points[1], Vec3(+1, -2, 0));
	this.AssertEquals(points[2], Vec3(+1, +2, 0));
	this.AssertEquals(points[3], Vec3(-1, +2, 0));

    Vec2 uv;
	this.AssertTrue(quad.getUVCoordinates(points[0], uv));
	this.AssertEquals(uv, Vec2(0, 0));
	this.AssertTrue(quad.getUVCoordinates(points[1], uv));
	this.AssertEquals(uv, Vec2(1, 0));
	this.AssertTrue(quad.getUVCoordinates(points[2], uv));
	this.AssertEquals(uv, Vec2(1, 1));
	this.AssertTrue(quad.getUVCoordinates(points[3], uv));
	this.AssertEquals(uv, Vec2(0, 1));

    // outside the quad!
	this.AssertFalse(quad.getUVCoordinates(Vec3(-2, -4, 0), uv));
	this.AssertEquals(uv, Vec2(-0.5, -0.5));
	this.AssertFalse(quad.getUVCoordinates(Vec3(-3, -6, 0), uv));
	this.AssertEquals(uv, Vec2(-1, -1));
	this.AssertFalse(quad.getUVCoordinates(Vec3(2, 4, 0), uv));
	this.AssertEquals(uv, Vec2(1.5, 1.5));

	center = Vec3(10, 0, 0);
	quad = Quad(center, 4.0, Vec3(1, 1, 0).normalized(), 2.0, Vec3(-1, 1, 0).normalized());
	this.AssertEquals(quad.getCenter(), center);
	this.AssertAlmostEquals(quad.getMin(), Vec3(+9.292893, -2.12132, +0.0));
	this.AssertAlmostEquals(quad.getMax(), Vec3(+10.7071, +2.12132, +0.0));
	this.AssertAlmostEquals(quad.getNormal(), Vec3(0, 0, 1));
}

TestRTCore.testBox!()
{
	Vec3 center = Vec3(0, 0, 0);
	Vec3 size = Vec3(2, 4, 8);
	Box box = Box(center, size);

	this.AssertEquals(box.getCenter(), center);
	this.AssertEquals(box.getSize(), size);
	this.AssertEquals(box.getMin(), Vec3(-1, -2, -4));
	this.AssertEquals(box.getMax(), Vec3(+1, +2, +4));

	this.AssertEquals(box.getSideType(CCeAxisType_X, -2), CCeSideType_Positive);
	this.AssertEquals(box.getSideType(CCeAxisType_X, +2), CCeSideType_Negative);
	this.AssertEquals(box.getSideType(CCeAxisType_X, 0), CCeSideType_Inside);
	this.AssertEquals(box.getSideType(CCeAxisType_Y, -4), CCeSideType_Positive);
	this.AssertEquals(box.getSideType(CCeAxisType_Y, +4), CCeSideType_Negative);
	this.AssertEquals(box.getSideType(CCeAxisType_Y, 0), CCeSideType_Inside);
	this.AssertEquals(box.getSideType(CCeAxisType_Z, -8), CCeSideType_Positive);
	this.AssertEquals(box.getSideType(CCeAxisType_Z, +8), CCeSideType_Negative);
	this.AssertEquals(box.getSideType(CCeAxisType_Z, 0), CCeSideType_Inside);

	Box box2 = BoxFromMinMax(Vec3(-1, -2, -4), Vec3(+1, +2, +4));
	this.AssertEquals(box.getCenter(), box2.getCenter());
	this.AssertEquals(box.getSize(), box2.getSize());
}

TestRTCore.testRay!()
{
	Vec3 origin = Vec3(0, 0, 0);
	Vec3 direction = Vec3(0, 0, 1);
	CCRay ray = CCRay(origin, direction);

	this.AssertEquals(ray.getOrigin(), origin);
	this.AssertEquals(ray.getDirection(), direction);
	this.AssertEquals(ray.getPosition(10), Vec3(0, 0, 10));
}

TestRTCore.testPlane!()
{
    Plane plane(Vec3(0, 1, 0), 10);
    this.AssertEquals(plane.getNormal(), Vec3(0, 1, 0));
    this.AssertEquals(plane.getDistance(), 10);

    plane = Plane(Vec3(0, 10, 0), Vec3(0, 1, 0));
    this.AssertEquals(plane.getNormal(), Vec3(0, 1, 0));
    this.AssertEquals(plane.getDistance(), 10);

    plane = Plane(Vec3(0, -10, 0), Vec3(0, 1, 0));
    this.AssertEquals(plane.getNormal(), Vec3(0, 1, 0));
    this.AssertEquals(plane.getDistance(), -10);

    plane = Plane(Vec3(0, -10, 0), Vec3(0, -1, 0));
    this.AssertEquals(plane.getNormal(), Vec3(0, -1, 0));
    this.AssertEquals(plane.getDistance(), 10);

    plane = Plane(Vec3(0, 0, 0), Vec3(1, 0, 0), Vec3(0, 1, 0));
    this.AssertEquals(plane.getNormal(), Vec3(0, 0, 1));
    this.AssertEquals(plane.getDistance(), 0);
    this.AssertEquals(plane.distanceTo(Vec3(0, 0, 0)), 0);
    this.AssertEquals(plane.reflectPoint(Vec3(0, 0, 0)), Vec3(0, 0, 0));
    this.AssertEquals(plane.reflectPoint(Vec3(0, 0, 10)), Vec3(0, 0, -10));
    this.AssertEquals(plane.reflectVector(Vec3(0, 0, -10)), Vec3(0, 0, 10));

    plane = Plane(Vec3(0, 0, 10), Vec3(1, 0, 10), Vec3(0, 1, 10));
    this.AssertEquals(plane.getNormal(), Vec3(0, 0, 1));
    this.AssertEquals(plane.getDistance(), 10);

    this.AssertEquals(plane.distanceTo(Vec3(0, 0, 0)), -10);
    this.AssertEquals(plane.distanceTo(Vec3(0, 0, 10)), 0);
    this.AssertEquals(plane.distanceTo(Vec3(0, 0, 20)), 10);
    this.AssertEquals(plane.reflectPoint(Vec3(0, 0, 20)), Vec3(0, 0, 0));
    this.AssertEquals(plane.reflectVector(Vec3(0, 0, 1)), Vec3(0, 0, -1));
}
