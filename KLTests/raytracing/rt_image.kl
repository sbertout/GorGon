require GorGon_Raytracing;
using namespace GorGon::Raytracing;

require GorGon_Image;

object TestRTImage : CCTestCase
{
};


object CreateRandomColorsTask : TaskBase
{
    OutputBuffer outputBuffer;
};
CreateRandomColorsTask(OutputBuffer outputBuffer)
{
    this.outputBuffer = outputBuffer;
}
CreateRandomColorsTask.execute!()
{
    Size width = this.outputBuffer.getWidth();
    Size height = this.outputBuffer.getHeight();
    for(Index y=0; y<height; ++y)
    {
        for(Index x=0; x<width; ++x)
        {
            PackedColor pc(mathRandomFloat32(0, y * width + x + 0, 0.0, 1.0),
                             mathRandomFloat32(0, y * width + x + 1, 0.0, 1.0),
                             mathRandomFloat32(0, y * width + x + 2, 0.0, 1.0));
            this.outputBuffer.set(pc, x, y);
        }
    }
}

TestRTImage.test01ImageWriter!()
{
    OutputBuffer outputBuffer(640, 480);

    TaskMaster tm();
    tm.addTask(CreateRandomColorsTask(outputBuffer));
    tm.addTask(ImageWriterTask('KLTests/_out/testImageWriter.png', outputBuffer));
    tm.executeAll();
}

TestRTImage.test02ImageReader!()
{
    Size width, height;
    PackedColor pixels[] = ImageReader('KLTests/_out/testImageWriter.png').read(width, height); // TODO? CCInputBuffer

    for(Index y=0; y<height; ++y)
    {
        for(Index x=0; x<width; ++x)
        {
            this.AssertAlmostEquals(pixels[y * width + x].r, mathRandomFloat32(0, y * width + x + 0, 0.0, 1.0), 0.01);
            this.AssertAlmostEquals(pixels[y * width + x].g, mathRandomFloat32(0, y * width + x + 1, 0.0, 1.0), 0.01);
            this.AssertAlmostEquals(pixels[y * width + x].b, mathRandomFloat32(0, y * width + x + 2, 0.0, 1.0), 0.01);
        }
    }
}
