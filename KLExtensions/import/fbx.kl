using namespace GorGon::Core;
using namespace GorGon::ECS;
using namespace GorGon::Scene;
using namespace GorGon::Rendering;

namespace GorGon::Import
{
    CCinjectImporterOptions(io Properties p, ImporterOptions impO)
    {
      for(Size boolIdx=0; boolIdx<impO.boolKey.size(); ++boolIdx)
        p.addBoolean(impO.boolKey[boolIdx], impO.boolValue[boolIdx]);
      for(Size scalarIdx=0; scalarIdx<impO.scalarKey.size(); ++scalarIdx)
        p.addScalar(impO.scalarKey[scalarIdx], impO.scalarValue[scalarIdx]);
      for(Size intIdx=0; intIdx<impO.intKey.size(); ++intIdx)
        p.addInteger(impO.intKey[intIdx], impO.intValue[intIdx]);
      for(Size stringIdx=0; stringIdx<impO.stringKey.size(); ++stringIdx)
        p.addString(impO.stringKey[stringIdx], impO.stringValue[stringIdx]);
    }

    String CCextractFilenameFromPath(String path)
    {
      String sa [] = path.split('/');
      return sa[sa.size()-1];
    }

    Entity CCimportFBX(String fbxFilepath, String fbxTexFolder)
    {
      FbxHandle fh();
      fh.openFileHandle(fbxFilepath, fbxTexFolder);
      // report(fh);
      // report(fh.getOpenedFilePath());

      // report(fbxFilepath.split('/'));

      String sa[] = fbxFilepath.split('/');
      // report(sa[sa.size()-1]);

      Entity root(sa[sa.size()-1]);


      ImporterOptions options();
      ImporterIdentifier identifiers[];
      fh.getIdentifiers(identifiers, options);
      for(Size i=0; i<identifiers.size(); ++i)
      {
        ImporterIdentifier impI = identifiers[i];
        // report(i + " ===> " + impI);

        // report('name = ' + impI.name);
        // report('index = ' + impI.index);
        // report('version = ' + impI.version);
        // report('type = ' + impI.type);
        // report('filePath = ' + impI.filePath);
        // report('fileIndex = ' + impI.fileIndex);
        // report('data = ' + impI.data);

        ImporterOptions impO = impI.data;

        // report('parentName = ' + impO.getStringOption('parentName', ''));
        // report('parentPath = ' + impO.getStringOption('parentPath', ''));

        // report('boolKeys = ' + impO.boolKey);
        // report('boolValues = ' + impO.boolValue);

        // report('scalarKeys = ' + impO.scalarKey);
        // report('scalarValues = ' + impO.scalarValue);

        // report('intKeys = ' + impO.intKey);
        // report('intValues = ' + impO.intValue);

        // report('stringKeys = ' + impO.stringKey);
        // report('stringValues = ' + impO.stringValue);

        // report('');

        switch(impI.type)
        {
          case 'TEXTURE':
            String name = CCextractFilenameFromPath(impI.name);
            CCTextureSet texSet = root.getOrCreateUpdateComponent('CCTextureSet');
            Properties texProperties = Properties();
            CCinjectImporterOptions(texProperties, impO);
            texSet.add(name, CCTexture(impI.name, texProperties));
          break;

          case 'MATERIAL':
            String name = impI.name;
            //Entity e(name);
            //CCinjectImporterOptions(e.getProperties(), impO); // inject into material instead !
            //root.addChild(e);

            MaterialSet matSet = root.getOrCreateUpdateComponent('MaterialSet');
            Properties matProperties = Properties();
            CCinjectImporterOptions(matProperties, impO);
            matSet.add(name, BaseMaterial(matProperties));

          break;

          case 'NULL': // just a transform !
            String name = impI.name;
            Entity e(name);
            CCinjectImporterOptions(e.getProperties(), impO);
            root.addChild(e);
          break;

          case 'MESH':
            String name = impI.name;
            Entity e(name);
            CCinjectImporterOptions(e.getProperties(), impO);

            String parentPath = e.getProperties().getStringValue('parentPath', '');
            Entity parentEntity = parentPath != '' ? root.findEntity(parentPath) : root;

            parentEntity.addChild(e); // should probably do some error check here !

            CCRenderable renderable = CCRenderable(e.getName() + 'CCRenderable', null, null);
            e.addUpdateComponent(renderable);

            // TODO get mesh data !
          break;

        }

        // Entity e(impI.name);
        // root.addChild(e);

      }

      // report(root.expandAllPaths());
      //report(root.getChildCount());
      // report(root.toString());
      // report('MATERIAL SET !!!!');
      // report(root.getUpdateComponent('MaterialSet').toString());
      // for(Size i=0; i<root.getChildCount(); ++i) {
      //   report('child[' + i + '] = ' + root.getChild(i).toString());
      //   // report(root.getChild(i));
      //   report('');
      // }


      // Vec3 bboxMin, bboxMax;
      // fh.parsePolygonMeshBbox(identifiers[2], bboxMin, bboxMax);
      // report(bboxMin);
      // report(bboxMax);

      fh.close();
      return root;
    }

    Entity CCimportAsset(String path, String secondaryPath)
    {
      return CCimportFBX(path, secondaryPath);
    }
}