require Math;
require Singletons;

object UpdateComponent;
object TransformComponent;
object Properties;

alias UpdateComponent UpdateComponentArray[];

object Entity
{
  private Index uid;
  private String name;

  private TransformComponent transformComponent;
  private UpdateComponentArray updateComponents;
  private UpdateComponentArray updateComponentsToRemove;

  private Properties properties;
};

Entity.appendDesc(io String s)
{
  s += this.toString();
} 

String Entity.toString()
{
  if (this == null) return 'null Entity';
  return String(this.name 
               + ' paths=' + this.getPaths() 
               + ' properties=' + this.properties.toString()
               // + ' transformComponent=' + this.transformComponent
               // + ' updateComponents=' + this.updateComponents 
               );
} 

// constructors
Entity.createEntity!(String n, io TransformComponent tc)
{
  EntityFactory ef = getEntityFactory();

  this.uid = ef.getUID();
  this.name = n;
  this.properties = Properties();
  this.setTransformComponent(tc);
}

Entity(String n)
{
  this.createEntity(n, TransformComponent());
}

Entity(String n, io UpdateComponent uc)
{
  this.createEntity(n, TransformComponent());
  this.addUpdateComponent(uc);
}

Entity(String n, Xfo xfo)
{
  this.createEntity(n, TransformComponent());
  this.setLocalTransform(xfo);
}

~Entity()
{
  report('byebye'); // doesnt work ???
}

Index Entity.getUID()
{ 
  return this.uid; 
}

String Entity.getName()
{ 
  return this.name; 
}

TransformComponent Entity.getTransformComponent()
{ 
  return this.transformComponent; 
}

Properties Entity.getProperties()
{ 
  return this.properties; 
}

String Entity.getPath()
{ 
  return this.transformComponent.getPath(); 
}

String[] Entity.getPaths()
{ 
  return this.transformComponent.getPaths(); 
}

Xfo Entity.getLocalTransform!()
{ 
  return this.transformComponent.getLocalTransform(); 
}

Xfo Entity.getGlobalTransform!()
{ 
  return this.transformComponent.getGlobalTransform(); 
}

XfoArray Entity.getGlobalTransforms!()
{ 
  return this.transformComponent.getGlobalTransforms(); 
}

Size Entity.getChildCount!()
{ 
  return this.transformComponent.getChildCount(); 
}

Entity Entity.getChild!(Index i)
{ 
  return this.transformComponent.getChild(i); 
}

Boolean Entity.hasParent()
{ 
  return this.transformComponent.hasParent(); 
}

Entity Entity.getParent()
{ 
  return this.transformComponent.getParent(0); 
}

Ref<Entity>[] Entity.getParents()
{ 
  return this.transformComponent.getParents(); 
}

Boolean Entity.isInstanced()
{
  Boolean isInstanced = this.getParents().size() > 1;
  if (isInstanced) return true;
  if (this.hasParent() == false) return false;
  return this.getParent().isInstanced();
}

Size Entity.getUpdateComponentCount()
{ 
  return this.updateComponents.size(); 
}

Entity.setLocalTransform!(Xfo tr)
{
  this.transformComponent.setLocalTransform(tr);
}

Entity.setTransformComponent!(io TransformComponent tc)
{ 
  this.transformComponent = tc; 
  tc.setOwnerEntity(this);
}

Boolean Entity.addUpdateComponent!(io UpdateComponent uc)
{
  if (this.hasUpdateComponent(uc)) return false;
  this.updateComponents.push(uc);
  uc.setOwnerEntity(this);
  return true;
}

Boolean Entity.removeUpdateComponent!(io UpdateComponent uc)
{
  if (this.hasUpdateComponent(uc) == false) return false;

  UpdateComponentArray newComponents;
  for(Size i=0; i<this.updateComponents.size(); ++i) 
  {
    if (this.updateComponents[i] != uc)
      newComponents.push(uc);
  }
  this.updateComponents = newComponents;

  return true;
}

Boolean Entity.safeRemoveUpdateComponent!(io UpdateComponent uc)
{
  if (this.hasUpdateComponent(uc) == false) return false;
  this.updateComponentsToRemove.push(uc);
  return true;  
}

Boolean Entity.hasUpdateComponent(UpdateComponent uc)
{
  return this.hasUpdateComponent(uc.getName());
}

Boolean Entity.hasUpdateComponent(String ucName)
{
  for(Size i=0; i<this.updateComponents.size(); ++i) 
  {
    if (this.updateComponents[i].getName() == ucName)
      return true;
  }
  return false;
}

UpdateComponent Entity.getUpdateComponent(String ucName)
{
  for(Size i=0; i<this.updateComponents.size(); ++i) 
  {
    if (this.updateComponents[i].getName() == ucName)
      return this.updateComponents[i];
  }
  return null;
}

UpdateComponentArray Entity.getUpdateComponents()
{
  return this.updateComponents;
}

Boolean == (Entity e1, Entity e2)
{
  return e1 != null && e2 != null && e1.getUID() == e2.getUID();
}

Boolean != (Entity e1, Entity e2)
{
  return !(e1 == e2);
}

Entity.addChild!(io Entity e)
{
  this.addChild(e, false);
}

Entity.addChild!(io Entity e, Boolean reparentChild)
{
  if (reparentChild) {
    Xfo invTr = this.getGlobalTransform().inverse();
    Xfo newChildTr = invTr * e.getGlobalTransform();
    e.setLocalTransform(newChildTr);

    // if we do reparent we have to clear our parents array
    e.getTransformComponent().clearParents();  
    // if (e.hasParent()) e.getTransformComponent().removeParent(e.getParent());  
  }

  this.transformComponent.addChild(e);
  e.getTransformComponent().addParent(this);
}

Entity.destroy()
{
  // foreach(Entity p in this.getParents()) {
  //   p.removeChild(this);
  // }
}

Entity.update!()
{
  for(Index i=0; i<this.updateComponents.size(); ++i)
  {
    UpdateComponent uc = this.updateComponents[i];

    if (uc.started == false)
    {
      uc.onStart();
      uc.started = true;
    } 
    else
    {
      uc.onUpdate();
    }
  }

  for(Index i=0; i<this.getChildCount(); ++i)
  {
    this.getChild(i).update();
  }

  if (this.updateComponentsToRemove.size() > 0)
  {
    for(Index i=0; i<this.updateComponentsToRemove.size(); ++i)
    {
      UpdateComponent uc = this.updateComponents[i];
      this.removeUpdateComponent(uc);
    }
    this.updateComponentsToRemove.resize(0);
  }  
}
