object CCTaskMaster
{
	private CCTaskBase tasks[];
	private Boolean usePex;
	private Boolean inExecuteAll;
	private Boolean verbose, alreadyResized;
	private Size currTaskCount; // only when alreadyResized is used
	private CCTaskBase tasksAddedWhileInExecuteAll[];
	private SimpleLock simpleLock;
};

CCTaskMaster.init!(Boolean usePex)
{
	this.usePex = usePex;	
	this.simpleLock = SimpleLock(String(this.uid()));
}

/// \dfgPresetTitle TaskMasterNoPEX
CCTaskMaster()
{
	this.init(false);
}

CCTaskMaster(Boolean usePex)
{
	this.init(usePex);
}

CCTaskMaster(Boolean usePex, Size count)
{
	this.init(usePex);
	this.tasks.resize(count);
	this.alreadyResized = true;
}

CCTaskMaster.verbose!() { this.verbose = true; }
SimpleLock CCTaskMaster.getSimpleLock() { return this.simpleLock; }

CCTaskMaster.addTask!(io CCTaskBase task)
{
    if (this.verbose) task.verbose();
	if (this.inExecuteAll)
	{
		AutoLock AL(this.simpleLock);		
		this.tasksAddedWhileInExecuteAll.push(task);
	}
	else		
	{
	    if (this.alreadyResized)
	    {
		    this.tasks[this.currTaskCount++] = task;
	    }
	    else
	    {
		    this.tasks.push(task);
	    }


	}
	task.owner = this;
}

operator pex_executeAll<<<index>>>(io CCTaskBase tasks[], io Ref<CCTaskMaster> taskMaster)
{
	if (tasks[index].canBeExecuted())
	{
	    if (tasks[index].getExecuteCount() == 0)
	    {
		    tasks[index].onFirstExecute();
	    }
		tasks[index].execute();
	}
	else
	{
		taskMaster.addTask(tasks[index]);
	}
}

private CCTaskMaster.executeAll!(io CCTaskBase tasks[])
{
	if (this.usePex)
	{
		pex_executeAll<<<tasks.size()>>>(tasks, this);
	}
	else
	{
		for(Index i=0; i<tasks.size(); ++i)
		{
			if (tasks[i].canBeExecuted())
			{
                if (tasks[i].getExecuteCount() == 0)
                {
                    tasks[i].onFirstExecute();
                }
				tasks[i].execute();
			}
			else
			{
				this.addTask(tasks[i]);
			}
		}
	}
	// let's now check in case we've added some new tasks!
	this.checkTasksAddedWhileInExecuteAll();
}

private CCTaskMaster.checkTasksAddedWhileInExecuteAll!()
{
	if (this.tasksAddedWhileInExecuteAll.size() == 0) return;

	// keep a temp copy of all our tasks
	CCTaskBase tasksAddedWhileInExecuteAllCopy[];
	for(Index i=0; i<this.tasksAddedWhileInExecuteAll.size(); ++i)
		tasksAddedWhileInExecuteAllCopy.push(this.tasksAddedWhileInExecuteAll[i]);
	this.tasksAddedWhileInExecuteAll.resize(0); // clear it before we execute again..

	this.executeAll(tasksAddedWhileInExecuteAllCopy);
}

CCTaskMaster.executeAll!()
{
    UInt64 currentTicks = getCurrentTicks();
	this.inExecuteAll = true;
	if (this.verbose) report(this.type() + " executing.. taskCount=" + this.tasks.size() + ' usePex=' + this.usePex);
	this.executeAll(this.tasks);
	this.inExecuteAll = false;
	if (this.verbose) report(this.type() + " executed in " + getSecondsBetweenTicks(currentTicks, getCurrentTicks())  + " seconds.");
}
